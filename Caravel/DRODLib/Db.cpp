/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Deadly Rooms of Death.
 *
 * The Initial Developer of the Original Code is
 * Caravel Software.
 * Portions created by the Initial Developer are Copyright (C) 1995, 1996, 
 * 1997, 2000, 2001, 2002 Caravel Software. All Rights Reserved.
 *
 * Contributor(s):
 * Mike Rimer (mrimer)
 *
 * ***** END LICENSE BLOCK ***** */

//Db.cpp
//Implementation of CDb.

#define INCLUDED_FROM_DB_CPP
#include "Db.h"
#undef INCLUDED_FROM_DB_CPP
#include "DbXML.h"
#include "CurrentGame.h"

//Holds the only instance of CDb for the app.
CDb *g_pTheDB = NULL;

//Reset hold and player.
DWORD	CDb::dwCurrentHoldID = 0L;
DWORD	CDb::dwCurrentPlayerID = 0L;
bool  CDb::bFreezeTimeStamps = false;

//
//CDb public methods.
//

//*****************************************************************************
CDb::CDb(void)
//Constructor.
{
	this->Players.FilterByLocal();
}

//*****************************************************************************
CDb::~CDb(void)
//Destructor.
{
}

//*****************************************************************************
DWORD CDb::GetHoldID(void)
//Returns: the current hold ID.  If it is zero, try to find the first ID.
{
	if (!dwCurrentHoldID)
	{
		CDbHold *pHold = this->Holds.GetFirst();
		if (pHold)
		{
			dwCurrentHoldID = pHold->dwHoldID;
			delete pHold;
		}
	}
	return dwCurrentHoldID;
}

//*****************************************************************************
DWORD	CDb::GetPlayerID(void)
//Returns: the current player ID.  If it is zero, try to find the first local ID.
{
   if (!CDb::dwCurrentPlayerID)
	{
		this->Players.FilterByLocal();
		CDbPlayer *pPlayer = this->Players.GetFirst();
		if (pPlayer)
		{
			CDb::dwCurrentPlayerID = pPlayer->dwPlayerID;
			delete pPlayer;
		}
	}
	return CDb::dwCurrentPlayerID;
}

//*****************************************************************************
CCurrentGame* CDb::GetImportCurrentGame()
//Import process sometimes needs access to an empty CCurrentGame object
//to save to level start (and entrance room) position.
{
   CCurrentGame *pCCG = new CCurrentGame();
   pCCG->dwAutoSaveOptions = ASO_DEFAULT;
   return pCCG;
}

//*****************************************************************************
CCurrentGame *CDb::GetSavedCurrentGame(
//Gets a current game object from a saved game.
//
//Params:
	const DWORD dwSavedGameID,	//(in)	Indicates saved game to load from.
	CCueEvents &CueEvents,		//(out)	Cue events generated by swordsman's first step 
								//		into the room.
	bool bRestoreAtRoomStart)	//(in)	If true, current game will be loaded to beginning
								//		of room in saved game.  If false, (default)
								//		current game will be loaded to the exact room
								//		state specified in the saved game.
//
//Returns:
//Pointer to loaded current game which caller must delete, or NULL saved game did not exist
//or loading failures occured.
{
	CCurrentGame *pCCG = new CCurrentGame();
	if (pCCG)
	{
		if (!pCCG->LoadFromSavedGame(dwSavedGameID, CueEvents, bRestoreAtRoomStart))
		{
			delete pCCG;
			pCCG=NULL;
		}
	}
	return pCCG;
}

//*****************************************************************************
CCurrentGame *CDb::GetNewCurrentGame(
//Gets a current game object from a hold.  The current game will be set to the
//starting settings for the hold.
//
//Params:
	const DWORD dwHoldID,		//(in) Indicates hold to load from.
	CCueEvents &CueEvents)		//(out)	Cue events generated by swordsman's
								//		first step  into the room.
//
//Returns:
//Pointer to loaded current game which caller must delete, or NULL if hold did
//not exist or loading failures occured.
{
	CCurrentGame *pCCG = new CCurrentGame();
	if (pCCG)
	{
		if (!pCCG->LoadFromHold(dwHoldID, CueEvents))
		{
			delete pCCG;
			pCCG=NULL;
		}
	}
	return pCCG;
}

//*****************************************************************************
CCurrentGame *CDb::GetNewTestGame(
//Gets a current game object from a room.
//The current game will be set to the starting settings for the room.
//Used for testing.
//
//Params:
	const DWORD dwRoomID,		//(in) Indicates room to load from.
	CCueEvents &CueEvents,		//(out)	Cue events generated by swordsman's
								//		first step into the room.
	const UINT wX, const UINT wY, const UINT wO)	//(in) Starting position
//
//Returns:
//Pointer to loaded current game which caller must delete, or NULL if room did
//not exist or loading failures occured.
{
	CCurrentGame *pCCG = new CCurrentGame();
	if (pCCG)
	{
		if (!pCCG->LoadFromRoom(dwRoomID, CueEvents, wX, wY, wO))
		{
			delete pCCG;
			pCCG=NULL;
		}
	}
	return pCCG;
}

//*****************************************************************************
void CDb::ResetMembership()
{
   this->Demos.ResetMembership();
   this->Holds.ResetMembership();
   this->Levels.ResetMembership();
   this->Players.ResetMembership();
   this->Rooms.ResetMembership();
   this->SavedGames.ResetMembership();
}

//*****************************************************************************
void CDb::SetHoldID(const DWORD dwNewHoldID)
{
	dwCurrentHoldID = dwNewHoldID;
	this->SavedGames.FilterByHold(dwNewHoldID);
}

//*****************************************************************************
void CDb::SetPlayerID(const DWORD dwNewPlayerID)
//Set active player and filter saved games for them.
{
	dwCurrentPlayerID = dwNewPlayerID;
	this->SavedGames.FilterByPlayer(dwNewPlayerID);
}

// $Log: Db.cpp,v $
// Revision 1.19  2003/07/09 21:17:16  mrimer
// Added GetImportCurrentGame().  Removed ImportFromFile().  Added freezing record timestamps on UpdateExisting().
//
// Revision 1.18  2003/07/03 08:02:00  mrimer
// Removed a comment.
//
// Revision 1.17  2003/06/09 23:52:32  mrimer
// Added ResetMembership().
//
// Revision 1.16  2003/05/08 22:01:07  mrimer
// Replaced local CDb instances with a pointer to global instance.
//
// Revision 1.15  2003/04/29 11:05:52  mrimer
// Moved CDb::verifyHoldSolvability() to CDbHolds::VerifySolvability().
//
// Revision 1.14  2003/04/24 22:46:10  mrimer
// Added verifyHoldSolvability() check.
//
// Revision 1.13  2003/04/06 03:57:00  schik
// Ported to SGI.
// All filenames in CFiles and elsewhere are now in Unicode if the platform supports it.
//
// Revision 1.12  2002/12/22 02:10:15  mrimer
// Removed XML import/export methods to CDbXML.
//
// Revision 1.11  2002/11/22 02:10:15  mrimer
// Added GetNewTestGame().
// Added skeleton code for XML_Import() using Expat.
//
// Revision 1.10  2002/11/14 19:02:35  mrimer
// Added methods to support multiple player and hold selection.
// Made some parameters const.
//
// Revision 1.9  2002/10/22 05:28:07  mrimer
// Revised includes.
//
// Revision 1.8  2002/06/09 06:07:47  erikh2000
// Added stubs for importing/exporting XML.
//
// Revision 1.7  2002/06/05 23:59:10  mrimer
// Rearranged includes for robustness.
//
// Revision 1.6  2002/04/28 23:40:53  erikh2000
// Revised #includes.
//
// Revision 1.5  2002/03/05 01:54:10  erikh2000
// Added 2002 copyright notice to top of file.
//
// Revision 1.4  2002/02/24 01:25:03  erikh2000
// Added CueEvents parameter to GetSavedCurrentGame() and GetNewCurrentGame().
//
// Revision 1.3  2002/02/15 02:46:56  erikh2000
// Added option to restore from beginning of room to CDb::GetSavedCurrentGame().
//
// Revision 1.2  2001/12/16 02:21:29  erikh2000
// Added #include needed for CurrentGame.h to compile.
//
// Revision 1.1.1.1  2001/10/01 22:20:07  erikh2000
// Initial check-in.
//
